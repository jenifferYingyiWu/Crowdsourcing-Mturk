function newData = shuffle_discretize_addPK(filename, outFileName, colsToIgnore, classColIdx, classValuesToMapTo1, doShuffle, randSeed)

randStream = RandStream('mt19937ar','seed', randSeed);

%data = loadcell(filename, ',', '"');
%data = loadcell(filename, char(9), '"'); %tab separator
data = loadcell(filename, ' ', '"');

nRows = size(data, 1);
nCols = size(data, 2);

% first check for rows with null values!
rowIsBad = zeros(nRows,1);
for i=1:nCols
    if ismember(i, colsToIgnore) || i == classColIdx
        continue;
    else % normal attributes --- assuming there is NO categorical attributes (except for possibly the class column)
        for j=1:nRows
            if ischar(cell2mat(data(j,i)))
                rowIsBad(j) = 1;
            end
        end
    end    
end

goodIdx = find(rowIsBad==0);
deletedRowsForNull = sum(rowIsBad);
data = data(goodIdx,:);
nRows = size(data, 1);

newData = zeros(nRows, 0);
for i=1:nCols
    if ismember(i, colsToIgnore)
        continue;
    elseif i == classColIdx
        col = data(:,i);    
        mappedCol = zeros(size(col));
        if isnumeric(col{1})
            isNumeric = true;
            num_classValuesToMapTo1 = cat(2, classValuesToMapTo1{:});
        else
            isNumeric = false;
        end
        for r=1:size(col,1)
            val = col{r};
            if isNumeric
                if ismember(val, num_classValuesToMapTo1)
                    mappedCol(r) = 1;
                end                
            else % for strings
                if ismember(val, classValuesToMapTo1)
                    mappedCol(r) = 1;
                end
            end
        end
    else % normal attributes --- assuming there is NO categorical attributes (except for possibly the class column)
        col = cell2mat(data(:,i));
        newData = [newData col];
    end    
end

newData = [mappedCol newData];

if doShuffle
    rndIdx = randperm(randStream, size(newData,1));
    newData = newData(rndIdx,:);
end

PK = (1:nRows)';
newData = [PK newData];

save([outFileName '.vis'], 'newData', '-ascii');

  fid = fopen([outFileName '.desc'], 'w');
  fprintf(fid, 'This dataset was generated by shuffle_discretize_addPK with these params: filename=%s, outFileName=%s, colsToIgnore=[', filename, outFileName);
    for s=1:length(colsToIgnore)
      fprintf(fid, '%d ', colsToIgnore(s));
    end
  fprintf(fid, '],  classColIdx=%d, classValuesToMapTo1=[', classColIdx);
    for s=1:length(classValuesToMapTo1)
      if ischar(classValuesToMapTo1{s})
          fprintf(fid, '%s ', classValuesToMapTo1{s});
      else
          fprintf(fid, '%d ', classValuesToMapTo1{s});
      end
    end
    fprintf(fid, '],  doShuffle=%d \n', doShuffle);

  fprintf(fid, '\nWe deleted %d rows because at least one of their attributes were null.\n', deletedRowsForNull);
  
  [accuracy recall precision f1_measure] = canClassify(newData(:,3:end), newData(:,2), 0.03, 3, @incSClassify);
  fprintf(fid, '\nWith 0.03 training, accuracy=%f\t f1-measure=%f\n', accuracy, f1_measure);
  
  [accuracy recall precision f1_measure] = canClassify(newData(:,3:end), newData(:,2), 0.3, 3, @incSClassify);
  fprintf(fid, 'With 0.3 training, accuracy=%f\t f1-measure=%f\n', accuracy, f1_measure);

  [accuracy recall precision f1_measure] = canClassify(newData(:,3:end), newData(:,2), 1, 3, @incSClassify);
  fprintf(fid, 'With 1.0 training, accuracy=%f\t f1-measure=%f\n', accuracy, f1_measure);
 
  fprintf(fid, '\nWe have %d instances = %d 1-instances + %d 0-instances\n', length(mappedCol), length(find(mappedCol==1)), length(find(mappedCol==0)));
  
  fprintf(fid, '\nThe format in %s is as follows:\n', [outFileName '.vis']);
  nAttrs = size(newData,2)-2; % discounting primaryKey and classLabel
  fprintf(fid, 'PrimaryKey, realClassLabel(1 or 0), feature1, ..., feature%d\n\n', nAttrs);


  fclose(fid);

  type([outFileName '.desc']); 
  
  fprintf(1, 'Done!\n');

end % function

